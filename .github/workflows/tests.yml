name: CI Testing

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64
      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. "-0" suffix: this allows to invalidate
      # the cache manually if/when we want to upgrade Poetry, or if something goes wrong.
      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.1.15-0
      # Installing Poetry.
      # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
      # Poetry's default install script, which feels correct.
      # The key configuration value here is `virtualenvs-in-project: true`: this creates the
      # venv as a `.venv` in our testing directory, which allows the next step to easily
      # cache it.
      - uses: snok/install-poetry@v1
        with:
          version: 1.1.15
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Caching dependencies (i.e. all the stuff in `pyproject.toml`).
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what we want to avoid caching _our_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      # Running Django API Automated tests
      - name: Run Tests
        run: |
          source .venv/bin/activate
          python manage.py test
      # Running pre-commit tests
      - name: Run pre-commit hooks
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install
          pre-commit run --all-files
